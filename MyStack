//栈：后进先出
public class Stack {
    //使用数组存储数据
    //栈可以存储多个引用类型的元素
    Object[] elements;
    //指向栈顶元素上方的栈帧
    int index;
    //栈默认的初始化容量是10
    Stack(){
        this(5);
    }
    Stack(int max){
        elements=new Object[max];
    }
    //栈对外提供一个压栈方法
    public void push(Object element){
        if(index==elements.length) try {
            throw new StackOperationException("栈已满！");
        } catch (StackOperationException e) {
            e.printStackTrace();
        }
        elements[index++]=element;
    }
    //对外提供一个出栈的方法
    public Object pop(){
        if(index==0){
            try {
                throw new StackOperationException("栈已空！");
            } catch (StackOperationException e) {
                e.printStackTrace();
            }
        }
        return elements[--index];
    }
    private class StackOperationException extends Throwable {
        public StackOperationException(String s) {
        }
    }
}
public class Main {
    public static void main(String[] args) {
        Stack s=new Stack();
        User u1=new User("A",12);
        User u2=new User("B",13);
        User u3=new User("C",14);
        User u4=new User("D",15);
        User u5=new User("E",16);
        s.push(u1);
        s.push(u2);
        s.push(u3);
        s.push(u4);
        s.push(u5);
        System.out.println(s.pop());
        System.out.println(s.pop());
        System.out.println(s.pop());
        System.out.println(s.pop());
        System.out.println(s.pop());
    }
}
class User{
    String name;
    int age;
    public User(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public String toString() {
        return "User[name="+name+",age="+age+"]";
    }
}
