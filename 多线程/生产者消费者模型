package 生产者消费者模型;

/**
 * 协作模型：生产者消费者实现方式一：管程法
 * 借助缓冲区
 */
public class CoTest01 {
    public static void main(String[] args) {
        SynContainer container = new SynContainer();
        new Productor(container).start();
        new Consumer(container).start();
    }
}
//生产者
class Productor extends Thread{
    SynContainer container;
    public Productor(SynContainer container){
        this.container = container;
    }
    @Override
    public void run() {
       for(int i=0;i<100;i++){
           System.out.println("生产-->"+i+"个馒头");
           container.push(new Steamedbun(i));
       }
    }
}
//消费者
class Consumer extends Thread{
    SynContainer container;
    public Consumer(SynContainer container){
        this.container = container;
    }
    @Override
    public void run() {
        for(int i=0;i<100;i++){
            System.out.println("消费-->"+container.pop().id+"个馒头");

        }
    }
}
//缓冲区
class SynContainer{
    Steamedbun[] buns = new Steamedbun[10];
    int count = 0;
    //存储
    public synchronized void push(Steamedbun bun){
        if(count == buns.length){
            try {
                this.wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        buns[count++] = bun;
        this.notifyAll();
    }
    //获取
    public synchronized Steamedbun pop(){
        if(count == 0){
            try {
                this.wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        Steamedbun bun = buns[--count];
        this.notifyAll();
        return bun;
    }
}
//馒头
class Steamedbun{
    int id;

    public Steamedbun(int id) {
        this.id = id;
    }
}
