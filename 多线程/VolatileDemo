package sgg_study;

import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

class MyData{//MyData.java====>MyData.class====>JVM字节码
    volatile int number = 0;
    public void addTo60(){
        this.number = 60;
    }
    //此时number前面是加了volatile关键字修饰的，volatile不保证原子性
    public void addPlusPlus(){
        number++;
    }
    AtomicInteger atomicInteger = new AtomicInteger(number);
    public void AddAutomic(){
        atomicInteger.getAndIncrement();
    }
}

/**
 * 1.验证volatile的可见性
 *  1.1 假如int number = 0；number 变量之前根本没有添加volatile关键字修饰，没有可见性
 *  1.2添加了volatile，可以解决可见性问题
 * 2.验证volatile不保证原子性
 *  2.1 原子性指的是什么意思？
 *      不可分割，完整性，也即某个线程正在做某个具体业务时，中间不可以被加塞或者被分割，需要整体完整。
 *      要么同时成功，要么同时失败
 *  2.2volatile不保证原子性的案例演示
 *  2.3 如何解决原子性？
 *      *加 sync
 *      *使用juc下的AutomicInteger
 * */
public class VolatileDemo {
    public static void main(String[] args) {//main是一切方法的运行入口
        MyData myData = new MyData();
        for(int i=0;i<20;i++){
            new Thread(()->{
                for(int j=0;j<1000;j++){
                    myData.addPlusPlus();
                    myData.AddAutomic();
                }
            },String.valueOf(i)).start();
        }
        //需要等待上面20个线程全部计算完成后，再用main线程取得最终的结果值看是多少
        while(Thread.activeCount()>2){
            Thread.yield();
        }
        System.out.println(Thread.currentThread().getName()+"\t int type finally number value:"+myData.number);
        System.out.println(Thread.currentThread().getName()+"\t AtomicInteger type finally number value:"+myData.atomicInteger);
    }
    //volatile可以保证可见性，及时通知其他线程，主物理内存的值已经被修改
    private static void SeeOkByVolatile() {
        MyData myData = new MyData();//资源类
        new Thread(()->{
            System.out.println(Thread.currentThread().getName()+"\t come in ");
           //暂停一会儿线程
            try{
                TimeUnit.SECONDS.sleep(3);
            }catch (InterruptedException e){e.printStackTrace();}
            myData.addTo60();
            System.out.println(Thread.currentThread().getName()+"\t updated number value "+myData.number);
        },"AAA").start();
        //第二个线程就是main线程
        while (myData.number == 0){
            //main线程就一直在这里等待循环，直到number值不再等于0
        }
        System.out.println(Thread.currentThread().getName()+"\t mission is over"+myData.number);
    }
}
